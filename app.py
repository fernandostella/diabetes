################################################
# P√≥s-Gradua√ß√£o em Big Data e Data Science
# Disciplina:   Implanta√ß√£o
# Professor:    Dr. Felipe de Morais
# Alunos:       Fernando Stella
#               Sidnei  
################################################
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import util
import data_handler
import pickle


#if not util.check_password():
#    st.stop()

# primeiro de tudo, carrega os dados dos testes para um dataframe
dados = data_handler.load_data()

# carrega o modelo de predi√ß√£o j√° treinado e validado
model = open('./model/model.pkl', 'rb')
model = pickle.load(model) 

# come√ßa a estrutura da interface do sistema
st.title('Predi√ß√£o de Diagn√≥stico de Diabetes')

data_analyses_on = st.toggle('Exibir an√°lise dos dados')

if data_analyses_on:
    # essa parte √© s√≥ um exmplo de que √© poss√≠vel realizar diversas visualiza√ß√µes e plotagens com o streamlit
    st.header('Dados das an√°lises de Diabetes - Dataframe')
    
    # exibe todo o dataframe dos dados de analises de diabetes
    st.dataframe(dados)

    # plota um histograma das idades dos pacientes
    st.header('Pacientes por Idade')
    fig = plt.figure()
    plt.hist(dados['Age'], bins=10)
    plt.xlabel('Idade')
    plt.ylabel('Quantidade')
    st.pyplot(fig)

    # plota um gr√°fico de barras com a contagem dos pacientes
    st.header('Resultados Positivos x Negativos')
    st.bar_chart(dados.Outcome.value_counts())
    
# Montagem da entrada de dados
st.header('Diagn√≥stico de Diabetes')

# Inputs:
# Pregnancies - int 
# Glucose - int
# BloodPressure - int
# SkinThickness - int
# Insulin - int
# BMI - float
# DiabetesPedigreeFunction - float
# Age - int


# Linha 1 de entrada de dados
col1, col2 = st.columns(2)
# Entrada de dados da quantidade de gesta√ß√µes da Paciente
with col1:    
    gestacoes = st.number_input('N¬∫ Gesta√ß√µes', step=1, min_value=0)
# N√≠vel de glicose do paciente
with col2:
    glicose = st.number_input('Glicose', step=10, min_value=0)

# Linha 2 de entrada de dados
col1, col2 = st.columns(2)
# Press√£o Arterial
with col1:
    pressao = st.number_input('Press√£o Arterial', step=10, min_value=0)    
# Espessura da pele 
with col2:
    pele = st.number_input('Espessura da pele', step=5, min_value=0)      

# Linha 3 de entrada de dados
col1, col2 = st.columns(2)
# N√≠vel de insulina
with col1:
    insulina = st.number_input('Insulina', step=100, min_value=0)    
# IMC
with col2:
    imc = st.number_input('IMC',step=0.10, min_value=0.00)        

# Linha 4 de entrada de dados
col1, col2 = st.columns(2)
# Pontua√ß√£o Hist√≥rico Familiar
with col1:
    hist = st.number_input('Pontua√ß√£o Hist√≥rico Familiar',min_value=0.000, step=0.1)    
# Idade
with col2:
    idade = st.number_input('Idade', step=1, min_value=0)        

# Linha 5 - Bot√£o de conforma√ß√£o
col1, col2 = st.columns(2)
with col1:
    submit = st.button('Analisar')

# Guarda os dados do paciente
paciente = {}
    
# verifica se o bot√£o submit foi pressionado e se o campo Outcome est√° em cache
if submit or 'Outcome' in st.session_state:
    
    paciente = {
        'Pregnancies': gestacoes,
        'Glucose': glicose,
        'BloodPressure': pressao,
        'SkinThickness': pele,
        'Insulin': insulina,
        'BMI': imc,
        'DiabetesPedigreeFunction': hist,
        'Age': idade 
    }
    print(paciente)    

    # converte o registo do paciente para pandas dataframe
    values = pd.DataFrame([paciente])
    print(values) 

    # Analisa os dados para paciente para diagn√≥sticar a diabetes
    results = model.predict(values)
    print(results)
    
    # Resultados:
    # 0) N√£o diagnosticado 
    # 1) Diagnosticado 
    
    if len(results) == 1:        
        diagnostico = int(results[0])        
        # Se o paciente √© diab√©tico
        if diagnostico == 1:            
            st.subheader('Resultado positivo para diabetes! ü§êüßÅ')
            if 'Outcome' not in st.session_state:
                 st.snow()
        else:            
            st.subheader('Resultado negat√≠vo para diabetes! üôå')
            if 'Outcome' not in st.session_state:
                st.balloons()
        
        # salva em cache da aplica√ß√£o o resultado da predi√ß√£o do resultado do paciente
        st.session_state['Outcome'] = diagnostico
    
    # verifica se existe um passageiro e se j√° foi verificado se ele sobreviveu ou n√£o
    if paciente and 'Outcome' in st.session_state:
        # se sim, pergunta ao usu√°rio se a predi√ß√£o est√° certa e salva essa informa√ß√£o
        st.write("A predi√ß√£o est√° correta?")
        col1, col2, col3 = st.columns([1,1,5])
        with col1:
            correct_prediction = st.button('üëçüèª')
        with col2:
            wrong_prediction = st.button('üëéüèª')
        
        # exibe uma mensagem para o usu√°rio agradecendo o feedback
        if correct_prediction or wrong_prediction:
            message = "Muito obrigado pelo feedback"
            if wrong_prediction:
                message += ", iremos usar esses dados para melhorar as predi√ß√µes"
            message += "."
            
            # adiciona no dict do paciente se o resultado est√° ou n√£o correto
            if correct_prediction:
                paciente['CorrectPrediction'] = True
            elif wrong_prediction:
                paciente['CorrectPrediction'] = False
                
            # adiciona no dict o resultado do paciente
            paciente['Outcome'] = st.session_state['Outcome']
            
            # escreve a mensagem na tela
            st.write(message)
            print(message)
            
            # salva a predi√ß√£o no JSON para c√°lculo das m√©tricas de avalia√ß√£o do sistema
            #data_handler.save_prediction(paciente)
            
    st.write('')
    # adiciona um bot√£o para permitir o usu√°rio realizar uma nova an√°lise
    col1, col2, col3 = st.columns(3)
    with col2:
        new_test = st.button('Iniciar Nova An√°lise')
        
        # se o usu√°rio pressionar no bot√£o e j√° existe um paciente, remove ele do cache
        if new_test and 'Outcome' in st.session_state:
            del st.session_state['Outcome']
            st.rerun()

# calcula e exibe as m√©tricas de avalia√ß√£o do modelo
# aqui, somente a acur√°ria est√° sendo usada
# TODO: adicionar as mesmas m√©tricas utilizadas na disciplina de treinamento e valida√ß√£o do modelo (recall, precision, F1-score)
accuracy_predictions_on = st.toggle('Exibir acur√°cia')

if accuracy_predictions_on:
    # pega todas as predi√ß√µes salvas no JSON
    predictions = data_handler.get_all_predictions()
    # salva o n√∫mero total de predi√ß√µes realizadas
    num_total_predictions = len(predictions)
    
    # calcula o n√∫mero de predi√ß√µes corretas e salva os resultados conforme as predi√ß√µes foram sendo realizadas
    accuracy_hist = [0]
    # salva o numero de predi√ß√µes corretas
    correct_predictions = 0
    # percorre cada uma das predi√ß√µes, salvando o total m√≥vel e o n√∫mero de predi√ß√µes corretas
    for index, paciente in enumerate(predictions):
        total = index + 1
        if paciente['CorrectPrediction'] == True:
            correct_predictions += 1
            
        # calcula a acurracia movel
        temp_accuracy = correct_predictions / total if total else 0
        # salva o valor na lista de historico de acuracias
        accuracy_hist.append(round(temp_accuracy, 2)) 
    
    # calcula a acuracia atual
    accuracy = correct_predictions / num_total_predictions if num_total_predictions else 0
    
    # exibe a acuracia atual para o usu√°rio
    st.metric(label='Acur√°cia', value=round(accuracy, 2))
    # TODO: usar o attr delta do st.metric para exibir a diferen√ßa na varia√ß√£o da acur√°cia
    
    # exibe o hist√≥rico da acur√°cia
    st.subheader("Hist√≥rico de acur√°cia")
    st.line_chart(accuracy_hist)